@inject EtherClient Client

<EditableTable TItem="ProfileViewModel"
    GridTitle="Profiles"
    ExistingTitle="Editing profile"
    NewTitle="New profile">
    <ListModeContent Context="ctx">
        <DataTable Items="@ctx.Items">
            <TableHeader>
                <th>Name</th>
                <th>Type</th>
                <th>Members</th>
                <th>Repositories</th>
            </TableHeader>
            <RowTemplate Context="profile">
                <td>@profile.Name</td>
                <td>@profile.Type</td>
                <td>@profile.Members.Count()</td>
                <td>@profile.Repositories.Count()</td>
            </RowTemplate>
            <ActionsTemplate Context="profile">
                <div>
                    <div class="dropdown btn-group" role="group">
                        <button id="btnGroupWorkItemsProfile" type="button" class="btn btn-info btn-fill dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Work items
                        </button>
                        <div class="dropdown-menu" aria-labelledby="btnGroupWorkItemsProfile">
                            <button class="dropdown-item" @onclick="@(() => FetchWorkItems(profile.Members))">Fetch work items</button>
                            <button class="dropdown-item" @onclick="@(() => ResetWorkItems(profile.Members))">Reset work items</button>
                        </div>
                    </div>
                    <button class="btn btn-warning btn-fill" @onclick="@(() => ctx.Edit(profile))">Edit</button>
                    <button class="btn btn-danger btn-fill" @onclick="@(() => ctx.Delete(profile))">Delete</button>
                </div>
            </ActionsTemplate>
        </DataTable>
    </ListModeContent>
    <FormModeContent Context="ctx">
        <div class="form-group">
            <label>Name</label>
            <InputText Class="form-control" @bind-Value="ctx.EditingItem.Name" />
            <ValidationMessage For="@(() => ctx.EditingItem.Name)" />
        </div>
        <div class="form-group">
            <label>Type</label>
            <InputText Class="form-control" @bind-Value="ctx.EditingItem.Type" />
            <ValidationMessage For="@(() => ctx.EditingItem.Type)" />
        </div>
        <div class="form-group">
            <label>Members</label>
            <Ether.Components.Form.OptionsSelector Options="@membersOptions"
                                                   @bind-Value="ctx.EditingItem.Members" />
            <ValidationMessage For="@(() => ctx.EditingItem.Members)" />
        </div>
        <div class="form-group">
            <label>Repositories</label>
            <Ether.Components.Form.OptionsSelector Options="@repositoriesOptions"
                                                   @bind-Value="ctx.EditingItem.Repositories" />
            <ValidationMessage For="@(() => ctx.EditingItem.Repositories)" />
        </div>
    </FormModeContent>
</EditableTable>

@code
{
    private EditableTableBase<TeamMemberViewModel> grid;
    private Dictionary<Guid, string> membersOptions = new Dictionary<Guid, string>(0);
    private Dictionary<Guid, string> repositoriesOptions = new Dictionary<Guid, string>(0);

    protected async Task FetchWorkItems(IEnumerable<Guid> members)
    {
        await Client.RunWorkitemsJob(members, isReset: false);
        await grid.Refresh();
    }

    protected async Task ResetWorkItems(IEnumerable<Guid> members)
    {
        await Client.RunWorkitemsJob(members, isReset: true);
        await grid.Refresh();
    }

    protected override async Task OnInitAsync()
    {
        await base.OnInitAsync();
        var members = await Client.GetAll<TeamMemberViewModel>();
        var repositories = await Client.GetAll<VstsRepositoryViewModel>();

        membersOptions = members.ToDictionary(m => m.Id, m => m.DisplayName);
        repositoriesOptions = repositories.ToDictionary(r => r.Id, r => r.Name);
    }
}