@inject EtherClient Client
@inject JsUtils JsUtils
@inject ILogger<VstsConfigurationSettings> Logger

<EditForm Model="vstsDataSource" OnValidSubmit="Save">
    <Card AdditionalClasses="card-600">
        <Header>Vsts configuration</Header>
        <Body>
            <div class="form-group">
                <label>Instance Name</label>
                <InputText Class="form-control" @bind-Value="vstsDataSource.InstanceName" />
                <ValidationMessage For="@(() => vstsDataSource.InstanceName)" />
            </div>
            <div class="form-group">
                <label>Default Token</label>
                <SelectInput Class="form-control" @bind-Value="vstsDataSource.DefaultToken" Options="identitiesOptions" />
                <ValidationMessage For="@(() => vstsDataSource.DefaultToken)" />
            </div>
        </Body>
        <Footer><button type="submit" class="btn btn-success btn-fill pull-right">Save</button></Footer>
    </Card>
</EditForm>

@code
{
    private Dictionary<Guid?, string> identitiesOptions = new Dictionary<Guid?, string>(10);
    private VstsDataSourceViewModel vstsDataSource = new VstsDataSourceViewModel();

    protected override async Task OnInitAsync()
    {
        base.OnParametersSet();
        vstsDataSource = await Client.GetVstsDataSourceConfig();
        var identities = await Client.GetAll<IdentityViewModel>();

        identitiesOptions.Add(Guid.Empty, Constants.NoneLabel);
        foreach (var identity in identities)
        {
            identitiesOptions.Add(identity.Id, identity.Name);
        }
    }

    private async Task Save()
    {
        try
        {
            await Client.SaveVstsDataSourceConfig(vstsDataSource);
            await JsUtils.NotifySuccess("Success", "Vsts configuration was updated successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating VSTS configuration");
            await JsUtils.NotifyError("Error updating VSTS configuration", ex.Message);
        }
    }
}