<EditableGrid Items="Items"
              IsReadOnly="true"
              GridTitle="Job Logs"
              OnRefresh="@(async () => await OnRefresh.InvokeAsync(null))">
    <ListModeContent Context="ctx">
        <DataTable Items="@ctx.Items" PageSize="8" OrderBy="orderByConfig">
            <TableHeader>
                <th>Type</th>
                <th>Result</th>
                <th>Completed On</th>
                <th>Execution time</th>
                <th>Message</th>
            </TableHeader>
            <RowTemplate Context="log">
                <td>@log.JobType</td>
                <td>
                    <JobStatusBadge Status="log.Result" />
                </td>
                <td>@(log.Result == ViewModels.Types.JobExecutionResult.InProgress ? string.Empty : log.CompletedOn.ToString())</td>
                <td>@(log.Result == ViewModels.Types.JobExecutionResult.InProgress ? string.Empty : log.ExecutionTime.ToString())</td>
                <td>@log.Message</td>
            </RowTemplate>
        </DataTable>
    </ListModeContent>
</EditableGrid>

@code
{
    private OrderByConfiguration<JobLogViewModel>[] orderByConfig = OrderByConfigurationBuilder<JobLogViewModel>
        .New()
        .OrderByDescending(l => l.CompletedOn)
        .Build();

    [Parameter] IEnumerable<JobLogViewModel> Items { get; set; }
    [Parameter] EventCallback OnRefresh { get; set; }
}