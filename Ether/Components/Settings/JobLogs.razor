<EditableGrid Items="Props.Items"
              IsReadOnly="true"
              GridTitle="Job Logs"
              ExistingTitle="Job Details"
              CancelButtonText="Back"
              OnRefresh="@(async () => await Props.OnRefresh.InvokeAsync(null))">
    <ListModeContent Context="ctx">
        <DataTable Items="@ctx.Items" 
                   PageSize="10"
                   TotalPages="Props.TotalPages"
                   CurrentPage="Props.CurrentPage"
                   IsServerPaging="true"
                   OnNextPage="Props.OnNextPage"
                   OnPreviousPage="Props.OnPreviousPage"
                   OrderBy="orderByConfig">
            <TableHeader>
                <th>Type</th>
                <th>Result</th>
                <th>Start time</th>
                <th>End time</th>
                <th>Execution time</th>
            </TableHeader>
            <RowTemplate Context="log">
                <td>
                    <If Condition="@(log.Result == ViewModels.Types.JobExecutionResult.Successful)">
                        <Then>
                            <button class="btn btn-link" @onclick="@(() => { })">@log.JobType</button>
                        </Then>
                        <Else>
                            @log.JobType
                        </Else>
                    </If>
                </td>
                <td>
                    <JobStatusBadge Status="log.Result" />
                </td>
                <td>@log.StartTime</td>
                <td>@log.EndTime</td>
                <td>@(log.EndTime.HasValue ? (log.EndTime - log.StartTime).ToString() : string.Empty)</td>
            </RowTemplate>
        </DataTable>
    </ListModeContent>
    <FormModeContent Context="ctx">
        <If Condition="@(ctx.EditingItem.JobType == "PullRequestsSyncJob")">
            <Then>
                <PullRequestJobDetail Details="@(ctx.EditingItem.Details as PullRequestJobDetails)" />
            </Then>
        </If>
    </FormModeContent>
</EditableGrid>

@code
{
    private OrderByConfiguration<JobLogViewModel>[] orderByConfig = OrderByConfigurationBuilder<JobLogViewModel>
        .New()
        .OrderByDescending(l => l.StartTime)
        .Build();

    [Parameter] JobLogsProps Props { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Props.CurrentPage == 0)
        {
            Console.WriteLine("Initializing logs");
            await Props.OnRefresh.InvokeAsync(null);
        }
    }

    //protected async Task OnViewDetails(EditableGridBase<JobLogViewModel> context, JobLogViewModel log)
    //{
    //    var details = await OnDetailsRequested(log);
    //    log.Details = details;
    //    context.Edit(log);
    //}
}