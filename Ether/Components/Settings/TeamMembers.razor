@inject EtherClient Client

<EditableTable @ref="grid" TItem="TeamMemberViewModel"
               GridTitle="Team members"
               NewTitle="New member"
               ExistingTitle="Editing member">
    <ListModeContent Context="ctx">
        <DataTable Items="@ctx.Items" PageSize="10">
            <FilterTemplate Context="dt">
                <div class="form-group">
                    <input class="form-control" type="text" placeholder="Type to search..."
                           @oninput="@(e => dt.Filter(i => i.DisplayName.Contains(e.Value.ToString()) || i.Email.Contains(e.Value.ToString())))" />
                </div>
            </FilterTemplate>
            <TableHeader>
                <th>Display Name</th>
                <th>Email</th>
                <th>Workitems count</th>
                <th>Last workitems fetch</th> 
            </TableHeader>
            <RowTemplate Context="member">
                <td>@member.DisplayName</td>
                <td>@member.Email</td> 
                <td>@member.WorkItemsCount</td>
                <td>@member.LastWorkitemsFetchDate</td>
            </RowTemplate>
            <ActionsTemplate Context="member">
                <div>
                    <div class=" dropdown btn-group" role="group">
                        <button id="btnGroupWorkItemsMember" type="button" class="btn btn-info btn-fill dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Work items
                        </button>
                        <div class="dropdown-menu" aria-labelledby="btnGroupWorkItemsMember">
                            <button class="dropdown-item" @onclick="@(() => FetchWorkItems(member))">Fetch work items</button>
                            <button class="dropdown-item" @onclick="@(() => ResetWorkItems(member))">Reset work items</button>
                        </div>
                    </div>
                    <button class="btn btn-warning btn-fill" @onclick="@(() => ctx.Edit(member))">Edit</button>
                    <button class="btn btn-danger btn-fill" @onclick="@(() => ctx.Delete(member))">Delete</button>
                </div>
            </ActionsTemplate>
        </DataTable>
    </ListModeContent>
    <FormModeContent Context="ctx">
        <div class="form-group">
            <label>Display name</label>
            <InputText Class="form-control" @bind-Value="ctx.EditingItem.DisplayName" />
            <ValidationMessage For="@(() => ctx.EditingItem.DisplayName)" />
        </div>
        <div class="form-group">
            <label>Email</label>
            <InputText Class="form-control" @bind-Value="ctx.EditingItem.Email" />
            <ValidationMessage For="@(() => ctx.EditingItem.Email)" />
        </div>
    </FormModeContent>
</EditableTable>

@code{
    [Parameter] IEnumerable<TeamMemberViewModel> Members { get; set; }
    [Parameter] EventCallback<TeamMemberViewModel> OnChange { get; set; }
    [Parameter] EventCallback<TeamMemberViewModel> OnDelete { get; set; }

private EditableTableBase<TeamMemberViewModel> grid;

protected async Task FetchWorkItems(TeamMemberViewModel member)
{
    await Client.RunWorkitemsJob(new[] { member.Id }, isReset: false);
    await grid.Refresh();
}

protected async Task ResetWorkItems(TeamMemberViewModel member)
{
    await Client.RunWorkitemsJob(new[] { member.Id }, isReset: true);
    await grid.Refresh();
}
}