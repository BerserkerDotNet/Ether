<EditableGrid Items="Members"
              GridTitle="Team members"
              NewTitle="New member"
              ExistingTitle="Editing member"
              OnSave="@(async (TeamMemberViewModel m) => await OnChange.InvokeAsync(m))"
              OnDelete="@(async (TeamMemberViewModel m) => await OnDelete.InvokeAsync(m))"
              OnRefresh="@(async () => await OnRefresh.InvokeAsync(null))">
    <ListModeContent Context="ctx">
        <DataTable Items="ctx.Items" PageSize="10">
            <FilterTemplate Context="dt">
                <div class="form-group">
                    <input class="form-control" type="text" placeholder="Type to search..."
                           @oninput="@(e => ApplyFilter(e, dt, false))" />
                </div>
                <div class="form-group">
                    <label>Profiles:</label>
                    <select class="form-control" @onchange="@((args) => ApplyFilter(args, dt, true))">
                        <option>None</option>
                        @foreach (var profile in Profiles)
                        {
                            <option value="@profile.Id">@profile.Name</option>
                        }
                    </select>
                </div>
            </FilterTemplate>
            <TableHeader>
                <th>Display Name</th>
                <th>Email</th>
                <th>Workitems count</th>
                <th>Last workitems fetch</th>
                <th>Last pull requests fetch</th>
            </TableHeader>
            <RowTemplate Context="member">
                <td>@member.DisplayName</td>
                <td>@member.Email</td>
                <td>@member.WorkItemsCount</td>
                <td>@member.LastWorkitemsFetchDate?.ToLocalTime()</td>
                <td>@member.LastPullRequestsFetchDate?.ToLocalTime()</td>
            </RowTemplate>
            <ActionsTemplate Context="member">
                <div>
                    <div class=" dropdown btn-group" role="group">
                        <button id="btnGroupWorkItemsMember" type="button" class="btn btn-info btn-fill dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Actions
                        </button>
                        <div class="dropdown-menu" aria-labelledby="btnGroupWorkItemsMember">
                            <button class="dropdown-item" @onclick="@(async () => await OnFetchWorkItems.InvokeAsync(member))">Fetch work items</button>
                            <button class="dropdown-item" @onclick="@(async () => await OnResetWorkItems.InvokeAsync(member))">Reset work items</button>
                            <div class="dropdown-divider"></div>
                            <button class="dropdown-item" @onclick="@(async () => await OnFetchPullRequests.InvokeAsync(member))">Fetch pull requests</button>
                            <button class="dropdown-item" @onclick="@(async () => await OnResetPullRequests.InvokeAsync(member))">Reset pull requests</button>
                        </div>
                    </div>
                    <button class="btn btn-warning btn-fill" @onclick="@(() => ctx.Edit(member))">Edit</button>
                    <button class="btn btn-danger btn-fill" @onclick="@(() => ctx.Delete(member))">Delete</button>
                </div>
            </ActionsTemplate>
        </DataTable>
    </ListModeContent>
    <FormModeContent Context="ctx">
        <div class="form-group">
            <label>Display name</label>
            <InputText Class="form-control" @bind-Value="ctx.EditingItem.DisplayName" />
            <ValidationMessage For="@(() => ctx.EditingItem.DisplayName)" />
        </div>
        <div class="form-group">
            <label>Email</label>
            <InputText Class="form-control" @bind-Value="ctx.EditingItem.Email" />
            <ValidationMessage For="@(() => ctx.EditingItem.Email)" />
        </div>
    </FormModeContent>
</EditableGrid>

@code{
    [Parameter] IEnumerable<TeamMemberViewModel> Members { get; set; }
    [Parameter] IEnumerable<ProfileViewModel> Profiles { get; set; }
    [Parameter] EventCallback<TeamMemberViewModel> OnChange { get; set; }
    [Parameter] EventCallback<TeamMemberViewModel> OnDelete { get; set; }
    [Parameter] EventCallback<TeamMemberViewModel> OnFetchWorkItems { get; set; }
    [Parameter] EventCallback<TeamMemberViewModel> OnResetWorkItems { get; set; }
    [Parameter] EventCallback<TeamMemberViewModel> OnFetchPullRequests { get; set; }
    [Parameter] EventCallback<TeamMemberViewModel> OnResetPullRequests { get; set; }
    [Parameter] EventCallback OnRefresh { get; set; }

    private string searchText = string.Empty;
    private string selectedProfile = string.Empty;

    private void ApplyFilter(UIChangeEventArgs args, DataTableBase<TeamMemberViewModel> dataTable, bool isProfile)
    {
        if (isProfile)
        {
            selectedProfile = args.Value.ToString();
        }
        else
        {
            searchText = args.Value.ToString();
        }

        dataTable.Filter(t => ProfileFilter(t) && SearchBoxFilter(t));
    }

    private Func<TeamMemberViewModel, bool> ProfileFilter
    {
        get
        {
            var isGuid = Guid.TryParse(selectedProfile, out var profileId);
            if (isGuid)
            {
                var profile = Profiles.Single(p => p.Id == profileId);
                return t => profile.Members.Contains(t.Id);
            }
            else
            {
                return _ => true;
            }
        }
    }

    private Func<TeamMemberViewModel, bool> SearchBoxFilter
    {
        get
        {
            return i => i.DisplayName.ToLower().Contains(searchText.ToLower()) || i.Email.Contains(searchText);
        }
    }
}