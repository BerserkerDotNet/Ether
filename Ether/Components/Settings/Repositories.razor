@inject EtherClient Client
<EditableGrid Items="Props.Items"
              GridTitle="Repositories"
              NewTitle="New Repository"
              ExistingTitle="Edit Repository"
              OnSave="@(async (VstsRepositoryViewModel r) => await Props.OnSave.InvokeAsync(r))"
              OnDelete="@(async (VstsRepositoryViewModel r) => await Props.OnDelete.InvokeAsync(r))"
              OnRefresh="@(async () => await Props.OnRefresh.InvokeAsync(null))">
    <ListModeContent Context="ctx">
        <DataTable Items="@ctx.Items">
            <TableHeader>
                <th>Name</th>
                <th>Project</th>
            </TableHeader>
            <RowTemplate Context="repository">
                <td>@repository.Name</td>
                <td>@GetProjectName(repository.Project)</td>
            </RowTemplate>
            <ActionsTemplate Context="repository">
                <div>
                    <button class="btn btn-warning btn-fill" @onclick="@(() => ctx.Edit(repository))">Edit</button>
                    <button class="btn btn-danger btn-fill" @onclick="@(() => ctx.Delete(repository))">Delete</button>
                </div>
            </ActionsTemplate>
        </DataTable>
    </ListModeContent>
    <FormModeContent Context="ctx">
        <ModelValidation Handler="ctx">
            <div class="form-group">
                <label>Name</label>
                <InputText Class="form-control" @bind-Value="ctx.EditingItem.Name" />
                <ValidationMessage For="@(() => ctx.EditingItem.Name)" />
            </div>
            <div class="form-group">
                <label>Project</label>
                <SelectInput Class="form-control" @bind-Value="ctx.EditingItem.Project" Options="Props.ProjectsOptions" />
                <ValidationMessage For="@(() => ctx.EditingItem.Project)" />
            </div>
        </ModelValidation>
    </FormModeContent>
</EditableGrid>

@code
{
    [Parameter] RepositoriesProps Props { get; set; }

    private string GetProjectName(Guid projectId)
    {
        if (!Props.ProjectsOptions.ContainsKey(projectId))
        {
            return "N/A";
        }

        return Props.ProjectsOptions[projectId];
    }
}