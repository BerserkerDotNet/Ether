@inject EtherClient Client

<EditableTable TItem="ProfileViewModel"
    GridTitle="Profiles"
    ExistingTitle="Editing profile"
    NewTitle="New profile">
    <ListModeContent Context="ctx">
        <DataTable Items="@ctx.Items">
            <TableHeader>
                <th>Name</th>
                <th>Type</th>
                <th>Members</th>
                <th>Repositories</th>
                <th>Actions</th>
            </TableHeader>
            <RowTemplate Context="profile">
                <td>@profile.Name</td>
                <td>@profile.Type</td>
                <td>@profile.Members.Count()</td>
                <td>@profile.Repositories.Count()</td>
                <td>
                    <div>
                        <button class="btn btn-warning btn-fill" onclick="@(() => ctx.Edit(profile))">Edit</button>
                        <button class="btn btn-danger btn-fill" onclick="@(() => ctx.Delete(profile))">Delete</button>
                    </div>
                </td>
            </RowTemplate>
        </DataTable>
    </ListModeContent>
    <FormModeContent Context="ctx">
        <ModelValidation Handler="ctx">
            <InputItem Type="text" Title="Name" PropertyName="@nameof(ctx.EditingItem.Name)" bind-Value="@ctx.EditingItem.Name" />
            <InputItem Type="text" Title="Type" PropertyName="@nameof(ctx.EditingItem.Type)" bind-Value="@ctx.EditingItem.Type" />
            <SelectItem Title="Members"
                        Multiple="true"
                        bind-Value="ctx.EditingItem.Members"
                        PropertyName="@nameof(ctx.EditingItem.Members)"
                        Options="@membersOptions" />
            <SelectItem Title="Repositories"
                        Multiple="true"
                        bind-Value="ctx.EditingItem.Repositories"
                        PropertyName="@nameof(ctx.EditingItem.Repositories)"
                        Options="@repositoriesOptions" />
        </ModelValidation>
    </FormModeContent>
</EditableTable>

@functions
{
    private Dictionary<Guid, string> membersOptions = new Dictionary<Guid, string>(0);
    private Dictionary<Guid, string> repositoriesOptions = new Dictionary<Guid, string>(0);

    protected override async Task OnInitAsync()
    {
        await base.OnInitAsync();
        var members = await Client.GetAll<TeamMemberViewModel>();
        var repositories = await Client.GetAll<VstsRepositoryViewModel>();

        membersOptions = members.ToDictionary(m => m.Id, m => m.DisplayName);
        repositoriesOptions = repositories.ToDictionary(r => r.Id, r => r.Name);
    }
}