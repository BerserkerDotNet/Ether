@implements IFormHandler
@inject EtherClient Client
@inject JsUtils JsUtils

<Card AdditionalClasses="card-600">
    <Header><h4 class="card-title">Vsts configuration</h4></Header>
    <Body>
        <ModelValidation Handler="this">
            <InputItem Type="text" Title="Instance Name" bind-Value="vstsDataSource.InstanceName" PropertyName="@nameof(vstsDataSource.InstanceName)" />
            <SelectItem Title="Default Token" bind-Value="vstsDataSource.DefaultToken" PropertyName="@nameof(vstsDataSource.DefaultToken)" Options="identitiesOptions" />
        </ModelValidation>
    </Body>
    <Footer><button class="btn btn-success btn-fill pull-right" onclick="@(() => Save())">Save</button></Footer>
</Card>

@functions
{
    private IFormValidator formValidator;
    private Dictionary<Guid, string> identitiesOptions = new Dictionary<Guid, string>(10);
    private VstsDataSourceViewModel vstsDataSource = new VstsDataSourceViewModel();


    protected override async Task OnInitAsync()
    {
        base.OnParametersSet();
        vstsDataSource = await Client.GetVstsDataSourceConfig();
        var identities = await Client.GetAll<IdentityViewModel>();

        identitiesOptions.Add(Guid.Empty, Constants.NoneLabel);
        foreach (var identity in identities)
        {
            identitiesOptions.Add(identity.Id, identity.Name);
        }
    }

    public void SetValidator(IFormValidator validator)
    {
        formValidator = validator;
    }

    private async Task Save()
    {
        try
        {
            if (formValidator != null && !formValidator.Validate(vstsDataSource))
            {
                return;
            }

            await Client.SaveVstsDataSourceConfig(vstsDataSource);
            await JsUtils.NotifySuccess("Success", "Vsts configuration was updated successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERROR: {ex}");
            await JsUtils.NotifyError("Error updating VSTS configuration", ex.Message);
        }
    }
}