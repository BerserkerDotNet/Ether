<EditableGrid Items="Props.Items"
              GridTitle="Projects"
              NewTitle="New Project"
              ExistingTitle="Editing Project"
              OnSave="@(async (VstsProjectViewModel p) => await Props.OnSave.InvokeAsync(p))"
              OnDelete="@(async (VstsProjectViewModel p) => await Props.OnDelete.InvokeAsync(p))"
              OnRefresh="@(async () => await Props. OnRefresh.InvokeAsync(null))">
    <ListModeContent Context="ctx">
        <DataTable Items="@ctx.Items">
            <TableHeader>
                <th>Name</th>
                <th>Is workitems enabled</th>
                <th>Identity</th>
            </TableHeader>
            <RowTemplate Context="project">
                <td>@project.Name</td>
                <td>@project.IsWorkItemsEnabled</td>
                <td>@GetIdentityName(project.Identity)</td>
            </RowTemplate>
            <ActionsTemplate Context="project">
                <div>
                    <button class="btn btn-warning btn-fill" @onclick="@(() => ctx.Edit(project))">Edit</button>
                    <button class="btn btn-danger btn-fill" @onclick="@(() => ctx.Delete(project))">Delete</button>
                </div>
            </ActionsTemplate>
        </DataTable>
    </ListModeContent>
    <FormModeContent Context="ctx">
        <div class="form-group">
            <label>Name</label>
            <InputText Class="form-control" @bind-Value="ctx.EditingItem.Name" />
            <ValidationMessage For="@(() => ctx.EditingItem.Name)" />
        </div>
        <div class="form-group">
            <label>Is Work Items Enabled</label>
            <InputCheckbox Class="form-control" @bind-Value="ctx.EditingItem.IsWorkItemsEnabled" />
            <ValidationMessage For="@(() => ctx.EditingItem.IsWorkItemsEnabled)" />
        </div>
        <div class="form-group">
            <label>Identity</label>
            <SelectInput Class="form-control" @bind-Value="ctx.EditingItem.Identity" Options="Props.IdentitiesOptions" />
            <ValidationMessage For="@(() => ctx.EditingItem.Identity)" />
        </div>
    </FormModeContent>
</EditableGrid>

@code
{
    [Parameter] public ProjectsProps Props { get; set; }

    private string GetIdentityName(Guid? identityId)
    {
        if (!identityId.HasValue)
        {
            return Constants.NoneLabel;
        }

        if (!Props.IdentitiesOptions.ContainsKey(identityId.Value))
        {
            return "N/A";
        }

        return Props.IdentitiesOptions[identityId.Value];
    }

}