@inject EtherClient Client
<EditableTable TItem="VstsProjectViewModel"
               GridTitle="Projects"
               NewTitle="New Project"
               ExistingTitle="Editing Project">
    <ListModeContent Context="ctx">
        <DataTable Items="@ctx.Items">
            <TableHeader>
                <th>Name</th>
                <th>Is workitems enabled</th>
                <th>Identity</th>
            </TableHeader>
            <RowTemplate Context="project">
                <td>@project.Name</td>
                <td>@project.IsWorkItemsEnabled</td>
                <td>@GetIdentityName(project.Identity)</td>
            </RowTemplate>
            <ActionsTemplate Context="project">
                <div>
                    <button class="btn btn-warning btn-fill" onclick="@(() => ctx.Edit(project))">Edit</button>
                    <button class="btn btn-danger btn-fill" onclick="@(() => ctx.Delete(project))">Delete</button>
                </div>
            </ActionsTemplate>
        </DataTable>
    </ListModeContent>
    <FormModeContent Context="ctx">
        <ModelValidation Handler="ctx">
            <InputItem Type="text" Title="Name" bind-Value="ctx.EditingItem.Name" PropertyName="@nameof(ctx.EditingItem.Name)" />
            <InputItem Type="checkbox" Title="Is Work Items Enabled" bind-Value="ctx.EditingItem.IsWorkItemsEnabled" PropertyName="@nameof(ctx.EditingItem.IsWorkItemsEnabled)" />
            <SelectItem Title="Identity" bind-Value="ctx.EditingItem.Identity" PropertyName="@nameof(ctx.EditingItem.Identity)" Options="identitiesOptions" />
        </ModelValidation>
    </FormModeContent>
</EditableTable>

@*<div class="form-check">
    <label class="form-check-label">
        <input class="form-check-input" type="checkbox" bind="EditingItem.IsWorkItemsEnabled" />
        Is Work Items Enabled
    </label>
</div>*@

@functions
{
    private Dictionary<Guid, string> identitiesOptions = new Dictionary<Guid, string>(10);

    protected override async Task OnInitAsync()
    {
        await base.OnInitAsync();
        var identities = await Client.GetAll<IdentityViewModel>();
        identitiesOptions.Add(Guid.Empty, Constants.NoneLabel);
        foreach (var identity in identities)
        {
            identitiesOptions.Add(identity.Id, identity.Name);
        }
    }

    private string GetIdentityName(Guid? identityId)
    {
        if (!identityId.HasValue)
        {
            return Constants.NoneLabel;
        }

        if (!identitiesOptions.ContainsKey(identityId.Value))
        {
            return "N/A";
        }

        return identitiesOptions[identityId.Value];
    }

}