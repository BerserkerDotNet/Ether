@inherits EditableTable<VstsProjectViewModel>

@if (IsEditing)
{
    <Card>
        <Header>
            @if (EditingItem.Id == Guid.Empty)
            {
                <h4 class="card-title">New project</h4>
            }
            else
            {
                <h4 class="card-title">Editing '@EditingItem.Name'</h4>
            }
        </Header>
        <Body>
            <div class="form-group">
                <label>Name:</label>
                <input class="form-control" type="text" bind="EditingItem.Name" />
            </div>
            <div class="form-check">
                <label class="form-check-label">
                    <input class="form-check-input" type="checkbox" bind="EditingItem.IsWorkItemsEnabled" />
                    Is Work Items Enabled
                </label>
            </div>
            <div class="form-group">
                <label>Identity:</label>
                <select class="form-control" bind="@SelectedIdentity">
                    <option>None</option>
                    @foreach (var identity in identities)
                    {
                        <option value="@identity.Id">@identity.Name</option>
                    }
                </select>
            </div>
        </Body>
        <Footer>
            <button class="btn btn-success btn-fill pull-right" onclick="@(() => Save())">Save</button>
            <button class="btn btn-danger btn-fill pull-right" onclick="@(() => Cancel())">Cancel</button>
        </Footer>
    </Card>
}
else
{
    <Card>
        <Header>Projects</Header>
        <Body>
            <DataTable Items="@Items">
                <TableHeader>
                    <th>Name</th>
                    <th>Is workitems enabled</th>
                    <th>Identity</th>
                    <th>Actions</th>
                </TableHeader>
                <RowTemplate Context="project">
                    <td>@project.Name</td>
                    <td>@project.IsWorkItemsEnabled</td>
                    <td>@GetIdentityName(project.Identity)</td>
                    <td>
                        <div>
                            <button class="btn btn-warning btn-fill" onclick="@(() => Edit(project))">Edit</button>
                            <button class="btn btn-danger btn-fill" onclick="@(() => Delete(project))">Delete</button>
                        </div>
                    </td>
                </RowTemplate>
            </DataTable>
        </Body>
        <Footer>
            <button class="btn btn-success btn-fill pull-right" onclick="@(() => New())">New</button>
        </Footer>
    </Card>
}

@functions
{
    private IEnumerable<IdentityViewModel> identities = Enumerable.Empty<IdentityViewModel>();

    protected override async Task OnInitAsync()
    {
        await base.OnInitAsync();
        identities = await Client.GetAll<IdentityViewModel>();
    }

    private string SelectedIdentity
    {
        get
        {
            return EditingItem.Identity?.ToString();
        }
        set
        {
            EditingItem.Identity = string.IsNullOrEmpty(value) ? (Guid?)null : (Guid?)Guid.Parse(value);
        }
    }

    private string GetIdentityName(Guid? identityId)
    {
        if (!identityId.HasValue)
        {
            return Constants.NoIdentityLabel;
        }

        var identity = identities.SingleOrDefault(i => i.Id == identityId.Value);
        return identity == null ? identityId.Value.ToString() : identity.Name;
    }
}