<div class="input-group">
    <div class="input-group-prepend">
        <button class="btn btn-outline-secondary" type="button" @onclick="@(async () => await OnNew.InvokeAsync(null) )"><i class="fas fa-plus"></i></button>
    </div>
    <select class="form-control" @onchange="@OnChange">
        <option>None</option>
        @foreach (var dashboard in Dashboards)
        {
            <option value="@dashboard.Id">@dashboard.DashboardName</option>
        }
    </select>
    @if (selected != null)
    {
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button" @onclick="@(async () => await OnEdit.InvokeAsync(selected.Id) )"><i class="fas fa-pen"></i></button>
            <button class="btn btn-outline-secondary" type="button" @onclick="@(async () => await OnDelete.InvokeAsync(selected.Id) )"><i class="fas fa-trash-alt"></i></button>
        </div>
    }
</div>

@code{
    private DashboardSettingsViewModel selected = null;
    [Parameter] public IEnumerable<DashboardSettingsViewModel> Dashboards { get; set; }
    [Parameter] public EventCallback OnNew { get; set; }
    [Parameter] public EventCallback<Guid> OnDelete { get; set; }
    [Parameter] public EventCallback<Guid> OnEdit { get; set; }
    [Parameter] public EventCallback<DashboardSettingsViewModel> OnSelected { get; set; }

    protected async Task OnChange(ChangeEventArgs args)
    {
        var dashboard = Dashboards.FirstOrDefault(d => d.Id == Guid.Parse(args.Value.ToString()));
        selected = dashboard;
        await OnSelected.InvokeAsync(dashboard);
    }
}