@inject EtherClient Client
    <div class="row form-600">
        <div class="col-12">
            <EditForm Model="vm">
                <div class="form-group">
                    <label>Dashboard Name:</label>
                    <InputText Class="form-control" @bind-value="vm.DashboardName" />
                </div>
                <div class="form-group">
                    <label>Profile:</label>
                    <InputText Class="form-control" @bind-value="ProfileId" />
                </div>
                <div class="form-group">
                    <label>Un-assigned query:</label>
                    <InputText Class="form-control" @bind-value="WorkitemsQueryId" />
                </div>
            </EditForm>
        </div>
        <div class="col-12">
            <EditableTable TItem="FilterSubTeam"
                           DataProvider="dataProvider"
                           FitToRecords ="true"
                           GridTitle="SubTeams"
                           NewTitle="New SubTeam"
                           ExistingTitle="Edit SubTeam">
                <ListModeContent Context="ctx">
                    <DataTable Items="ctx.Items">
                        <TableHeader>
                            <th>Name</th>
                            <th>Members count</th>
                        </TableHeader>
                        <RowTemplate Context="subTeam">
                            <td>@subTeam.Name</td>
                            <td>@subTeam.Members?.Count()</td>
                        </RowTemplate>
                        <ActionsTemplate Context="team">
                            <div>
                                <button class="btn btn-warning btn-fill" @onclick="@(() => ctx.Edit(team))">Edit</button>
                                <button class="btn btn-danger btn-fill" @onclick="@(() => ctx.Delete(team))">Delete</button>
                            </div>
                        </ActionsTemplate>
                    </DataTable>
                </ListModeContent>
                <FormModeContent Context="ctx">
                    <div>
                        <div class="form-group">
                            <label>Group name</label>
                            <InputText class="form-control" @bind-Value="@ctx.EditingItem.Name" />
                        </div>
                        <div class="form-group">
                            <label>Members</label>
                            <Ether.Components.Form.OptionsSelector Options="@options" @bind-Value="@ctx.EditingItem.Members" />
                        </div>
                    </div>
                </FormModeContent>
            </EditableTable>
        </div>
    </div>

@code{
private Dictionary<string, string> options = new Dictionary<string, string>();
private IEditableTableDataProvider dataProvider = new NoOpEditableTableDataProvider();
private DashboardSettingsViewModel vm = new DashboardSettingsViewModel();

protected string ProfileId
{
    get
    {
        return vm.ProfileId.ToString();
    }
    set
    {
        if (Guid.TryParse(value, out var result))
        {
            vm.ProfileId = result;
        }
    }
}

protected string WorkitemsQueryId
{
    get
    {
        return vm.WorkitemsQueryId?.ToString();
    }
    set
    {
        if (Guid.TryParse(value, out var result))
        {
            vm.WorkitemsQueryId = result;
        }
        else
        {
            vm.WorkitemsQueryId = null;
        }
    }
}

[Parameter] public Guid? DashboardId { get; set; }

protected override async Task OnParametersSetAsync()
{
    if (DashboardId.HasValue)
    {
        vm = await Client.GetById<DashboardSettingsViewModel>(DashboardId.Value);
        var members = await Client.GetAll<TeamMemberViewModel>();
        options = members.ToDictionary(k => k.Email, k => k.DisplayName);
    }
    else
    {
        DashboardId = vm.Id = Guid.NewGuid();
    }

    dataProvider = new DashboardSubTeamEditableTableDataProvider(Client, DashboardId.Value);
}
}