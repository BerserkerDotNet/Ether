@typeparam T
@typeparam TOption
@inherits InputItemBase<T>
@inject JsUtils JsUtils

<ValidatedField Properties="@Properties" Title="@Title">
    @if (Multiple)
    {
        <select @ref="multiSelectElement" multiple class="form-control" @onchange="@OnSelectionChanged">
            @foreach (var option in Options)
            {
                if (!isInitialized && MultipleValue.Contains(option.Key))
                {
                    <option selected value="@option.Key">@option.Value</option>
                }
                else
                {
                    <option value="@option.Key">@option.Value</option>
                }
            }
        </select>
    }
    else
    {
        <select class="form-control" @onchange="@OnSelectionChanged">
            @foreach (var option in Options)
            {
                if (Equals(option.Key, Value))
                {
                    <option selected value="@option.Key">@option.Value</option>
                }
                else
                {
                    <option value="@option.Key">@option.Value</option>
                }
            }
        </select>
    }
</ValidatedField>

@code{

        ElementRef multiSelectElement;
        bool isInitialized = false;

    [Parameter] Dictionary<TOption, string> Options { get; set; }

    [Parameter] bool Multiple { get; set; }

    protected override void OnAfterRender()
    {
        base.OnAfterRender();
        isInitialized = true;
    }

    private async Task OnSelectionChanged(UIChangeEventArgs e)
    {
        if (!Multiple)
        {
            Value = ConvertHelper.ConvertTo<T>(e.Value);
        }
        else
        {
            var ids = await JsUtils.GetAllSelectedOptions(multiSelectElement);
            var newValues = ids.Select(i => ConvertHelper.ConvertTo<TOption>(i)).ToArray();

            if (Value == null)
            {
                Value = (T)Enumerable.Empty<TOption>();
            }
            else
            {
                Value = (T)((object)newValues);
            }
        }
    }

    IEnumerable<TOption> MultipleValue
    {
        get
        {
            if (Value == null)
            {
                return Enumerable.Empty<TOption>();
            }

            return (IEnumerable<TOption>)Value;
        }
    }
}