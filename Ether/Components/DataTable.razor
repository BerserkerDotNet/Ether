@typeparam TItem

<table class="table">
    <thead>
        <tr>
            @TableHeader
            @if (ActionsTemplate != null)
            {
                <th class="pull-right">Actions</th>
            }
        </tr>
    </thead>
    <tbody>
        @*TODO: No pagination?*@
        @if (!Items.Any())
        {
            <p>@GetNoItemsText()</p>
        }
        @foreach (var item in Items.Skip(PageSize * (currentPage - 1)).Take(PageSize))
        {
            <tr>
                @RowTemplate(item)
                @if (ActionsTemplate != null)
                {
                    <td class="pull-right">
                        @ActionsTemplate(item)
                    </td>
                }
            </tr>
        }
    </tbody>
    <tfoot>
        @TableFooter
        @if (itemsCount > PageSize)
        {
            <tr>
                <td colspan="100">
                    <div class="pull-right">
                        <button class="btn btn-simple" disabled="@(currentPage == 1)" onclick="@(() => PrevPage())">Prev</button>
                        <span>@currentPage of @totalPages</span>
                        <button class="btn btn-simple" disabled="@(currentPage >= totalPages)" onclick="@(() => NextPage())">Next</button>
                    </div>
                </td>
            </tr>
        }
    </tfoot>
</table>

@functions
{
    private int currentPage = 1;
    private int totalPages = 0;
    private int itemsCount = 0;

    [Parameter] int PageSize { get; set; } = 10;
    [Parameter] RenderFragment TableHeader { get; set; }
    [Parameter] RenderFragment<TItem> RowTemplate { get; set; }
    [Parameter] RenderFragment<TItem> ActionsTemplate { get; set; }
    [Parameter] RenderFragment TableFooter { get; set; }
    [Parameter] IEnumerable<TItem> Items { get; set; }
    [Parameter] string NoItemsText { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        itemsCount = Items.Count();
        totalPages = (int)Math.Ceiling(itemsCount / (decimal)PageSize);
    }

    protected void NextPage()
    {
        currentPage++;
        StateHasChanged();
    }

    protected void PrevPage()
    {
        currentPage--;
        StateHasChanged();
    }

    protected string GetNoItemsText()
    {
        return string.IsNullOrEmpty(NoItemsText) ? "No items" : NoItemsText;
    }
}