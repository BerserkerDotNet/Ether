@inject EtherMenuService MenuService
    <ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">

        <!-- Sidebar - Brand -->
        <a class="sidebar-brand d-flex align-items-center justify-content-center" href="/">
            <div class="sidebar-brand-icon rotate-n-15">
                <i class="fas fa-chart-pie"></i>
            </div>
            <div class="sidebar-brand-text mx-3">Ether <sup>reports</sup></div>
        </a>

        <!-- Divider -->
        <hr class="sidebar-divider my-0">
        @foreach (var menu in MenuService.Menu)
        {
            <NavItem Item="menu" />
        }

        <!-- Divider -->
        <hr class="sidebar-divider">

        <div class="text-center d-none d-md-inline">
            <button class="rounded-circle border-0" id="sidebarToggle"></button>
        </div>
        @*
        <!-- Heading -->
        <div class="sidebar-heading">
            Interface
        </div>

        <!-- Nav Item - Pages Collapse Menu -->
        <li class="nav-item">
            <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
                <i class="fas fa-fw fa-cog"></i>
                <span>Components</span>
            </a>
            <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordionSidebar">
                <div class="bg-white py-2 collapse-inner rounded">
                    <h6 class="collapse-header">Custom Components:</h6>
                    <a class="collapse-item" href="buttons.html">Buttons</a>
                    <a class="collapse-item" href="cards.html">Cards</a>
                </div>
            </div>
        </li>*@
    </ul>
@functions { 

    protected override async Task OnInitAsync()
    {
        Console.WriteLine("Initializing menu");
        await MenuService.LoadMenuAsync();
    }

    protected override void OnAfterRender()
    {
        Console.WriteLine("Rendering menu");
        base.OnAfterRender();
    }
}