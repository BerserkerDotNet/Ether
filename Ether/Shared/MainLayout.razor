@inherits LayoutComponentBase

@inject EtherClient Client
@inject TokenService TokenService
@inject IUriHelper UriHelper
@if (isAuthenticated)
{
    <div id="wrapper">
        <Ether.Components.Modal.BootstrapModal />
        <NavMenu />
        <div id="content-wrapper" class="d-flex flex-column">
            <div id="content">
                <nav class="d-print-none navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">
                    <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
                        <i class="fas fa-bars"></i>
                    </button>
                    <ul class="navbar-nav ml-auto">

                        <div class="topbar-divider d-none d-sm-block"></div>

                        <!-- Nav Item - User Information -->
                        <li class="nav-item dropdown no-arrow">
                            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <span class="mr-2 d-none d-lg-inline text-gray-600 small">Welcome, @currentUser.DisplayName</span>
                                <img class="img-profile rounded-circle" src="/images/user.png">
                            </a>
                        </li>
                    </ul>
                </nav>
                <div class="container-fluid">
                    @Body
                </div>
            </div>
            <FooterBlock />
        </div>
    </div>
}
else
{
    <div class="text-center" style="padding-top:20%">
        <div class="spinner-grow text-primary" role="status" style="width: 5rem; height: 5rem;">
            <span class="sr-only">Loading...</span>
        </div>
        <div>Signing you in...</div>
    </div>

}
@code{
    protected bool isAuthenticated = false;
    protected UserViewModel currentUser = UserViewModel.Anonymous;

    protected override async Task OnInitAsync()
    {
        var token = await TokenService.GetToken();
        if (token == null || token.ExpiresAt <= DateTime.UtcNow)
        {
            UriHelper.NavigateTo("/login");
        }
        else
        {
            Client.SetAccessToken(token.Token);
            currentUser = await Client.GetCurrentUserAsync();
            isAuthenticated = true;
        }
    }
}