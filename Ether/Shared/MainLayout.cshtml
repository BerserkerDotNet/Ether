@inherits BlazorLayoutComponent

@inject EtherClient Client
@inject TokenService TokenService
@inject IUriHelper UriHelper
@if (isAuthenticated)
{
    <div class="wrapper">
        <div class="sidebar" data-color="azure" data-image="~/sidebar-background.jpg">
            <div class="sidebar-wrapper">
                <NavMenu />
            </div>
            <div class="sidebar-background" style="background-image: url('/sidebar-background.jpg');"></div>
        </div>
        <div class="main-panel">
            <nav class="navbar navbar-expand-lg">
                <div class="container-fluid">
                    <div class="collapse navbar-collapse justify-content-end" id="navigation">
                        <ul class="navbar-nav ml-auto">
                            <li class="nav-item">
                                <a class="nav-link" href="">
                                    <span class="no-icon">Welcome, @currentUser.DisplayName</span>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>
            <div class="content">
                <div class="container-fluid">
                    @Body
                </div>
            </div>
        </div>
    </div>
}
else
{ 
    <div class="text-center" style="padding-top:20%">
        <div class="spinner-grow text-primary" role="status" style="width: 5rem; height: 5rem;">
            <span class="sr-only">Loading...</span>
        </div>
        <div>Signing you in...</div>
    </div>
    
}
@functions{
    protected bool isAuthenticated = false;
    protected UserViewModel currentUser = UserViewModel.Anonymous;

    protected override async Task OnInitAsync()
    {
        var token = await TokenService.GetToken();
        if (token == null || token.ExpiresAt <= DateTime.UtcNow)
        {
            UriHelper.NavigateTo("/login");
        }
        else
        {
            Client.SetAccessToken(token.Token);
            currentUser = await Client.GetCurrentUserAsync();
            isAuthenticated = true;
        }
    }
}