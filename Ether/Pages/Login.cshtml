@page "/login"
@layout LoginLayout
@implements IFormHandler

@inject EtherClient Client
@inject TokenService TokenService
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<form class="text-center form-signin" onsubmit="@DoLogin">
    <img class="mb-4" src="/images/logo.png" alt="Ether pie chart logo image" width="128" height="128">
    <h1 class="h3 mb-3 font-weight-normal">Please sign in</h1>
    <ModelValidation Handler="this">
        <InputItem Title="User name" bind-Value="model.UserName" PropertyName="@nameof(model.UserName)" NoLabel="true" />
        <InputItem Title="Password" bind-Value="model.Password" PropertyName="@nameof(model.Password)" Type="password" NoLabel="true" />
    </ModelValidation>
    <button ref="submit" class="btn btn-lg btn-primary btn-fill btn-block" onclick="@DoLogin"
         data-loading-text="<i class='fa fa-circle-o-notch fa-spin'></i> Signing you in"
         data-normal-text="Sign in">Sign in</button>
    <p class="mt-5 mb-3 text-muted">© Andrii Snihyr @DateTime.Now.Year</p>
</form>
@functions{

    private IFormValidator formValidator;
    private LoginViewModel model;
    private ElementRef submit;

    protected override void OnInit()
    {
        model = new LoginViewModel();
        base.OnInit();
    }

    public void SetValidator(IFormValidator validator)
    {
        formValidator = validator;
    }

    private async Task DoLogin()
    {
        if (formValidator != null && !formValidator.Validate(model))
        {
            return;
        }

        await JsUtils.ButtonState(submit, "loading");
        var token = await Client.RequestAccessToken(model);
        await TokenService.SetToken(token);
        UriHelper.NavigateTo("/");
    }
}