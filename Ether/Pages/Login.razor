@page "/login"
@layout LoginLayout

@inject EtherClient Client
@inject TokenService TokenService
@inject IUriHelper UriHelper
@inject JsUtils JsUtils

<EditForm class="text-center form-signin" Model="@model" OnValidSubmit="@DoLogin">
    <img class="mb-4" src="/images/logo.png" alt="Ether pie chart logo image" width="128" height="128">
    <h1 class="h3 mb-3 font-weight-normal">Please sign in</h1>
    <FluentValidationValidator />
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger" role="alert">
            @error
        </div>
    }
    <div class="form-group">
        <InputText Class="form-control" id="UserName" @bind-Value="@model.UserName" placeholder="User name" />
        <ValidationMessage For="@(() => model.UserName)" />
    </div>
    <div class="form-group">
        <InputText Class="form-control" id="Password" @bind-Value="@model.Password" type="password" placeholder="Password" />
        <ValidationMessage For="@(() => model.Password)" />
    </div>
    <button @ref="submit" type="submit" ref="submit" class="btn btn-lg btn-primary btn-fill btn-block"
            data-loading-text="<i class='fa fa-circle-o-notch fa-spin'></i> Signing you in"
            data-normal-text="Sign in">
        Sign in
    </button>
    <p class="mt-5 mb-3 text-muted">Copyright © 2017 - @DateTime.UtcNow.Year <a href="https://twitter.com/BerserkerDotNET">Andrii Snihyr</a>.</p>
</EditForm>
@code{

    private LoginViewModel model;
    private ElementRef submit;
    private string error = string.Empty;

    protected override void OnInit()
    {
        model = new LoginViewModel();
        base.OnInit();
    }

    private async Task DoLogin()
    {
        await JsUtils.ButtonState(submit, "loading");
        try
        {
            error = string.Empty;
            var token = await Client.RequestAccessToken(model);
            await TokenService.SetToken(token);
            UriHelper.NavigateTo("/");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            await JsUtils.ButtonState(submit, "");
        }
    }
}