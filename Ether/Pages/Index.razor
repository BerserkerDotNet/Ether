@page "/"

@inject EtherClient Client
@inject IUriHelper UriHelper
@inject JsUtils JsUtils
@inject ILogger<Index> Logger

<div class="row">
    <div class="col-md-12">
        <Ether.Components.Card>
            <Header>New report</Header>
            <Body>
                <EditForm OnValidSubmit="Create" Model="model">
                    <FluentValidationValidator />
                    <div class="form-group">
                        <label>Profile</label>
                        <SelectInput Class="form-control" @bind-Value="model.Profile" Options="@profileOptions" />
                        <ValidationMessage For="@(() => model.Profile)" />
                    </div>
                    @* TODO: Return supported report types from API*@
                    <div class="form-group">
                        <label>Report type</label>
                        <SelectInput Class="form-control" @bind-Value="model.ReportType" Options="@reportTypes" />
                        <ValidationMessage For="@(() => model.ReportType)" />
                    </div>
                    <div class="form-group">
                        <label>Date range</label>
                        <DateRangeControl Class="form-control" @bind-Start="model.Start" @bind-End="model.End" />
                        <ValidationMessage For="@(() => model.Start)" />
                        <ValidationMessage For="@(() => model.End)" />
                    </div>
                    @if (isGeneratingReport)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Generating...</span>
                            </div>
                            <div>Generating...</div>
                        </div>
                    }
                    <button class="btn btn-success btn-fill pull-right" type="submit">Create a report</button>
                </EditForm>
            </Body>
        </Ether.Components.Card>
    </div>
</div>

@code
{
    private bool isGeneratingReport;
    private IEnumerable<ProfileViewModel> profiles = Enumerable.Empty<ProfileViewModel>();
    private GenerateReportViewModel model = new GenerateReportViewModel { ReportType = "PullRequestsReport" };

    private Dictionary<string, string> reportTypes = new Dictionary<string, string>(0);
    private Dictionary<Guid, string> profileOptions = new Dictionary<Guid, string>(0);

    protected override async Task OnInitAsync()
    {
        profiles = await Client.GetAll<ProfileViewModel>();
        var reportDescriptors = await Client.GetReportTypes();
        reportTypes = reportDescriptors.ToDictionary(k => k.UniqueName, v => v.DisplayName);

        profileOptions = profiles.ToDictionary(k => k.Id, v => $"{v.Name} ({v.Type})");
        // Select first profile
        model.Profile = profiles.First().Id;
    }

    private async Task Create()
    {
        try
        {
            Console.WriteLine("CREATE: " + model.Profile + "; " + model.Start + "; " + model.End);

            isGeneratingReport = true;
            var reportId = await Client.GenerateReport(model);
            UriHelper.NavigateTo($"/reports/view/{model.ReportType}/{reportId}");
            await JsUtils.NotifySuccess("Report", "Report generated successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error generating report");
            await JsUtils.NotifyError("Report", $"Error generating report: {ex.Message}");
            isGeneratingReport = false;
        }
    }
}