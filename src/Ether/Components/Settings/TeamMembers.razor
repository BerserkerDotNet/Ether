<RichTable Items="Props.Members"
           GridTitle="Team members"
           FormTitle="Edit member"
           OnRefresh="async () => await Props.OnRefresh.InvokeAsync(null)"
           OnSaveEdit="Props.OnChange"
           OnCancelEdit="Props.OnRefresh">
    <TableHeader>
        <th>Display Name</th>
        <th>Email</th>
        <th>Workitems count</th>
        <th>Last workitems fetch</th>
        <th>Last pull requests fetch</th>
        <th></th>
    </TableHeader>
    <TableBody Context="ctx">
        <td>@ctx.CurrentItem.DisplayName</td>
        <td>@ctx.CurrentItem.Email</td>
        <td>@ctx.CurrentItem.WorkItemsCount</td>
        <td>@ctx.CurrentItem.LastWorkitemsFetchDate?.ToLocalTime()</td>
        <td>@ctx.CurrentItem.LastPullRequestsFetchDate?.ToLocalTime()</td>
        <td>
            <div>
                <MatButton Label="Edit" Icon="@MatIconNames.Edit" Dense="true" OnClick="() => ctx.Edit()" />
                <DeleteButton OnDelete="async () => await Props.OnDelete.InvokeAsync(ctx.CurrentItem)" />
                <DropDownMenu Label="More">
                    <MatListItem OnClick="async () => await Props.OnFetchWorkItems.InvokeAsync(ctx.CurrentItem)"><MatIcon Icon="@MatIconNames.Refresh" />&nbsp; Fetch work items</MatListItem>
                    <MatListItem OnClick="async () => await Props.OnResetWorkItems.InvokeAsync(ctx.CurrentItem)"><MatIcon Icon="@MatIconNames.Repeat" />&nbsp; Reset work items</MatListItem>
                    <MatListDivider />
                    <MatListItem OnClick="async () => await Props.OnFetchPullRequests.InvokeAsync(ctx.CurrentItem)"><MatIcon Icon="@MatIconNames.Refresh" />&nbsp; Fetch pull requests</MatListItem>
                    <MatListItem OnClick="async () => await Props.OnResetPullRequests.InvokeAsync(ctx.CurrentItem)"><MatIcon Icon="@MatIconNames.Repeat" />&nbsp; Reset pull requests</MatListItem>
                </DropDownMenu>
            </div>
        </td>
    </TableBody>
    <FormBody Context="ctx">
        <p>
            <MatTextField @bind-Value="ctx.CurrentItem.DisplayName" Label="Display name" FullWidth="true" />
            <ValidationMessage For="@(() => ctx.CurrentItem.DisplayName)" />
        </p>
        <p>
            <MatTextField @bind-Value="ctx.CurrentItem.Email" Label="Email" FullWidth="true" />
            <ValidationMessage For="@(() => ctx.CurrentItem.Email)" />
        </p>
    </FormBody>
</RichTable>

@code{
    [Parameter] public TeamMembersProps Props { get; set; }

    private string searchText = string.Empty;
    private string selectedProfile = string.Empty;

    private void ApplyFilter(ChangeEventArgs args, DataTableBase<TeamMemberViewModel> dataTable, bool isProfile)
    {
        if (isProfile)
        {
            selectedProfile = args.Value.ToString();
        }
        else
        {
            searchText = args.Value.ToString();
        }

        dataTable.Filter(t => ProfileFilter(t) && SearchBoxFilter(t));
    }

    private Func<TeamMemberViewModel, bool> ProfileFilter
    {
        get
        {
            var isGuid = Guid.TryParse(selectedProfile, out var profileId);
            if (isGuid)
            {
                var profile = Props.Profiles.Single(p => p.Id == profileId);
                return t => profile.Members.Contains(t.Id);
            }
            else
            {
                return _ => true;
            }
        }
    }

    private Func<TeamMemberViewModel, bool> SearchBoxFilter
    {
        get
        {
            return i => i.DisplayName.ToLower().Contains(searchText.ToLower()) || i.Email.Contains(searchText);
        }
    }
}