<RichTable
           Items="Props.Items"
           GridTitle="Profiles"
           FormTitle="Editing profile"
           OnRefresh="async () => await Props.OnRefresh.InvokeAsync(null)"
           OnSaveEdit="Props.OnChange"
           OnCancelEdit="Props.OnRefresh">
    <TableHeader>
        <th>Name</th>
        <th>Type</th>
        <th>Members</th>
        <th>Repositories</th>
        <th></th>
    </TableHeader>
    <TableBody Context="ctx">
        <td>@ctx.CurrentItem.Name</td>
        <td>@ctx.CurrentItem.Type</td>
        <td>@ctx.CurrentItem.Members.Count()</td>
        <td>@ctx.CurrentItem.Repositories.Count()</td>
        <td>
            <div>
                <MatButton Label="Edit" Icon="@MatIconNames.Edit" Dense="true" OnClick="() => ctx.Edit()" />
                <DeleteButton OnDelete="async () => await Props.OnDelete.InvokeAsync(ctx.CurrentItem)" />
                <DropDownMenu Label="More">
                    <MatListItem OnClick="async () => { await Props.OnFetchWorkItems.InvokeAsync(ctx.CurrentItem.Members); this.StateHasChanged(); }"><MatIcon Icon="@MatIconNames.Refresh" />&nbsp; Fetch work items</MatListItem>
                    <MatListItem OnClick="async () => await Props.OnResetWorkItems.InvokeAsync(ctx.CurrentItem.Members)"><MatIcon Icon="@MatIconNames.Repeat" />&nbsp; Reset work items</MatListItem>
                    <MatListDivider />
                    <MatListItem OnClick="async () => await Props.OnFetchPullRequests.InvokeAsync(ctx.CurrentItem.Members)"><MatIcon Icon="@MatIconNames.Refresh" />&nbsp; Fetch pull requests</MatListItem>
                    <MatListItem OnClick="async () => await Props.OnResetPullRequests.InvokeAsync(ctx.CurrentItem.Members)"><MatIcon Icon="@MatIconNames.Repeat" />&nbsp; Reset pull requests</MatListItem>
                </DropDownMenu>
            </div>
        </td>
    </TableBody>
    <FormBody Context="ctx">
        <MatTabGroup>
            <MatTab Label="General">
                <p>
                    <MatTextField @bind-Value="ctx.CurrentItem.Name" Label="Name" FullWidth="true" />
                    <ValidationMessage For="@(() => ctx.CurrentItem.Name)" />
                </p>
                <p>
                    <MatTextField @bind-Value="ctx.CurrentItem.Type" Label="Type" FullWidth="true" />
                    <ValidationMessage For="@(() => ctx.CurrentItem.Type)" />
                </p>
            </MatTab>
            <MatTab Label="Members">
                <p>
                    <Options @bind-Value="ctx.CurrentItem.Members" Label="Members" Items="@Props.MembersOptions" ItemIcon="@MatIconNames.Person"></Options>
                    <ValidationMessage For="@(() => ctx.CurrentItem.Members)" />
                </p>
            </MatTab>
            <MatTab Label="Repositories">
                <p>
                    <Options @bind-Value="ctx.CurrentItem.Repositories" Label="Repositories" Items="@Props.RepositoriesOptions" ItemIcon="@MatIconNames.Archive"></Options>
                    <ValidationMessage For="@(() => ctx.CurrentItem.Repositories)" />
                </p>
            </MatTab>
            <MatTab Label="Email options">
                <EmailTemplate Model="ctx.CurrentItem" />
            </MatTab>
        </MatTabGroup>
    </FormBody>
</RichTable>

@code
{
    [Parameter] public ProfilesProps Props { get; set; }
}