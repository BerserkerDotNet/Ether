<RichTable Items="Props.Items"
           GridTitle="Job Logs"
           FormTitle="Job Details"
           OnRefresh="Props.OnRefresh"
           ShowAdd="false">
    <TableHeader>
        <th>Type</th>
        <th>Result</th>
        <th>Start time</th>
        <th>End time</th>
        <th>Execution time</th>
        <th>Actions</th>
    </TableHeader>
    <TableBody Context="ctx">
        <td>
            @ctx.CurrentItem.JobType
        </td>
        <td>
            <JobStatusBadge Status="ctx.CurrentItem.Result" />
        </td>
        <td>@ctx.CurrentItem.StartTime</td>
        <td>@ctx.CurrentItem.EndTime</td>
        <td>@(ctx.CurrentItem.EndTime.HasValue ? (ctx.CurrentItem.EndTime - ctx.CurrentItem.StartTime).ToString() : string.Empty)</td>
        <td>
            <If Condition="@(ctx.CurrentItem.Result == ViewModels.Types.JobExecutionResult.Successful)">
                <Then>
                    <MatButton Icon="@MatIconNames.Details" OnClick="() => OnViewDetails(ctx)">Details</MatButton>
                </Then>
            </If>
        </td>
    </TableBody>
    <FormBody Context="ctx">
        <If Condition="@(ctx.CurrentItem.JobType == "PullRequestsSyncJob")">
            <Then>
                <PullRequestJobDetail Details="@(ctx.CurrentItem.Details as PullRequestJobDetails)" />
            </Then>
        </If>
    </FormBody>
</RichTable>

@code
{
    [Parameter] public JobLogsProps Props { get; set; }

    protected async Task OnViewDetails(RichTableContext<JobLogViewModel> context)
    {
        await Props.OnDetailsRequested.InvokeAsync(context.CurrentItem);
        context.Edit();
    }
}