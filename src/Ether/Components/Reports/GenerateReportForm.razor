<EditForm Model="reportRequest" OnValidSubmit="Generate">
    <MatHeadline4>New report</MatHeadline4>
    <p>
        <SelectControl @bind-Value="reportRequest.Profile"
                       Options="Props.Profiles"
                       KeyToString="k => k.ToString()"
                       StringToKey="s => Guid.Parse(s)"
                       Label="Identity" />
        <ValidationMessage For="@(() => reportRequest.Profile)" />
    </p>
    <p>
        <SelectControl @bind-Value="reportRequest.ReportType"
                       Options="Props.ReportTypes"
                       KeyToString="k => k"
                       StringToKey="s => s"
                       Label="Report Type" />
        <ValidationMessage For="@(() => reportRequest.ReportType)" />
    </p>
    <p>
        <label>Date range:</label>
        <DateRangeControl Class="form-control" @bind-Start="reportRequest.Start" @bind-End="reportRequest.End" />
        <ValidationMessage For="@(() => reportRequest.Start)" />
        <ValidationMessage For="@(() => reportRequest.End)" />
    </p>

    <MatButton Raised="true" Type="Submit">Create a report</MatButton>
</EditForm>

<SpinnerDialog IsShown="isGeneratingReport" Label="Analyzing data, please wait..." />

@code{

    private bool isGeneratingReport;
    private GenerateReportViewModel reportRequest = new GenerateReportViewModel();

    [Parameter] public GenerateReportFormProps Props { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        reportRequest.Profile = Props.Profile;
        reportRequest.ReportType = Props.ReportType;
        if (reportRequest.Start == default)
        {
            reportRequest.Start = Props.StartDate;
        }

        if (reportRequest.End == default)
        {
            reportRequest.End = Props.EndDate;
        }
    }

    private async Task Generate()
    {
        isGeneratingReport = true;
        try
        {
            await Props.OnGenerate.InvokeAsync(reportRequest);
        }
        finally
        {
            isGeneratingReport = false;
        }

    }
}