@inject JsUtils Js

<div @ref="bodyContent"></div>
@code {
    private ElementReference bodyContent;
    private bool isInitilized = false;

    [Parameter] public string Value { get; set; }

    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    [Parameter] public Expression<Func<string>> ValueExpression { get; set; }

    [JSInvokable]
    public async Task OnChanged(string value)
    {
        if (!string.Equals(value, Value))
        {
            Value = value;
            await ValueChanged.InvokeAsync(value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isInitilized)
        {
            isInitilized = true;
            await Js.SummerNoteBootstrap(bodyContent, Value, DotNetObjectReference.Create<object>(this));
            
        }
    }
}
