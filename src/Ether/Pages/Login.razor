@page "/login"
@layout LoginLayout

@inject EtherClient Client
@inject TokenService TokenService
@inject NavigationManager Navigation
@inject JsUtils JsUtils

<EditForm class="text-center form-signin" Model="@model" OnValidSubmit="@DoLogin">
    <img class="mb-4" src="/images/logo.png" alt="Ether pie chart logo image" width="128" height="128">
    <MatHeadline5>Please sign in</MatHeadline5>
    <FluentValidationValidator />
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger" role="alert">
            @error
        </div>
    }
    <p>
        <MatTextField @bind-Value="@model.UserName" Label="User Name" Icon="@MatIconNames.Person" FullWidth="true" />
        <ValidationMessage For="@(() => model.UserName)" />
    </p>
    <p>
        <MatTextField @bind-Value="@model.Password" Label="Password" Type="password" Icon="@MatIconNames.Lock" FullWidth="true" />
        <ValidationMessage For="@(() => model.Password)" />
    </p>
    <MatButton Label="Sign in" Type="submit" Raised="true" />
    <p class="mt-5 mb-3 text-muted">Copyright © 2017 - @DateTime.UtcNow.Year <a href="https://twitter.com/BerserkerDotNET">Andrii Snihyr</a>.</p>
</EditForm>
<SpinnerDialog IsShown="isLoading" Label="Signing you in, please wait..." />
@code{

    private bool isLoading = false;
    private LoginViewModel model;
    private ElementReference submit;
    private string error = string.Empty;

    protected override void OnInitialized()
    {
        model = new LoginViewModel();
        base.OnInitialized();
    }

    private async Task DoLogin()
    {
        try
        {
            isLoading = true;
            error = string.Empty;
            var token = await Client.RequestAccessToken(model);
            await TokenService.SetToken(token);
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }
}