@page "/reports/view/{type}/{id:guid}"
@inject EtherClient Client
@inject NavigationManager UriHelper
@inject JsUtils JsUtils

@if (string.Equals(Type, "WorkitemsReporter"))
{
    <Ether.Components.Card Title="@reportDisplayName">
        <Header>
            <div class="d-print-none pull-right d-print-none">
                @if (supportsExcel != null)
                {
                    <button class="btn btn-fill btn-primary" @onclick="ExportToExcel">Export to Excel</button>
                }
                <If Condition="supportsEmail">
                    <Then>
                        <button class="btn btn-fill btn-primary" @onclick="GenerateEmail">Generate Email</button>
                    </Then>
                </If>
                <button class="btn btn-fill btn-secondary" @onclick="Print">Print</button>
                <button class="btn btn-fill btn-info" @onclick="NewReport">New report</button>
                <button class="btn btn-fill btn-success" @onclick="BackToList">Back to list</button>
            </div>
        </Header>
    </Ether.Components.Card>
    @componentToRender
}
else
{
    <Ether.Components.Card Title="@reportDisplayName">
        <Header>
            <div class="d-print-none pull-right d-print-none">
                @if (supportsExcel)
                {
                    <button class="btn btn-fill btn-primary" @onclick="ExportToExcel">Export to Excel</button>
                }
                <If Condition="supportsEmail">
                    <Then>
                        <button class="btn btn-fill btn-primary" @onclick="GenerateEmail">Generate Email</button>
                    </Then>
                </If>
                <button class="btn btn-fill btn-secondary" @onclick="Print">Print</button>
                <button class="btn btn-fill btn-info" @onclick="NewReport">New report</button>
                <button class="btn btn-fill btn-success" @onclick="BackToList">Back to list</button>
            </div>
        </Header>
        <Body>
            @componentToRender
        </Body>
    </Ether.Components.Card>
}

@code
{
    private string reportDisplayName = string.Empty;
    private bool supportsExcel = false;
    private bool supportsEmail = false;
    private RenderFragment componentToRender;
    private ReportViewModel report;

    [Parameter]
    public Guid? Id { get; set; }

    [Parameter]
    public string Type { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        // TODO: that is not going to fly
        if (string.Equals(Type, "PullRequestsReport", StringComparison.OrdinalIgnoreCase))
        {
            reportDisplayName = "Pull requests report";
            report = await Client.GetById<PullRequestReportViewModel>(Id.Value);
            supportsExcel = true;
            supportsEmail = false;
            componentToRender = b => RenderComponent<Ether.Components.Reports.PullRequestsReport>(b);
        }
        else if (string.Equals(Type, "AggregatedWorkitemsETAReport", StringComparison.OrdinalIgnoreCase))
        {
            reportDisplayName = "Aggregated workitems ETA report";
            report = await Client.GetById<AggregatedWorkitemsETAReportViewModel>(Id.Value);
            supportsExcel = false;
            supportsEmail = false;
            componentToRender = b => RenderComponent<Ether.Components.Reports.AggregatedWorkitemsETAReport>(b);
        }
        else if (string.Equals(Type, "WorkitemsReporter", StringComparison.OrdinalIgnoreCase))
        {
            reportDisplayName = "Workitems report";
            report = await Client.GetById<WorkItemsReportViewModel>(Id.Value);
            supportsExcel = true;
            supportsEmail = true;
            componentToRender = b => RenderComponent<Ether.Components.Reports.WorkitemsReport>(b);
        }
    }

    protected void RenderComponent<T>(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder)
        where T : IComponent
    {
        builder.OpenComponent<T>(1);
        builder.AddAttribute(2, "Id", Id.Value);
        builder.AddAttribute(3, "Report", report);
        builder.CloseComponent();
    }

    protected void BackToList()
    {
        UriHelper.NavigateTo("/reports");
    }

    protected void NewReport()
    {
        UriHelper.NavigateTo("/");
    }

    protected void Print()
    {
        JsUtils.Print();
    }

    protected async Task ExportToExcel()
    {
        var excelReport = await Client.GenerateExcel(report.Id);
        var base64EncodedReport = Convert.ToBase64String(excelReport);
        await JsUtils.SaveAsFile("report.xlsx", base64EncodedReport);
    }

    protected void GenerateEmail()
    {
         UriHelper.NavigateTo($"/reports/email/{Id.Value}");
    }
}
