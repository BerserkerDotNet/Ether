@page "/reports/view/{type}/{id:guid}"
@inject EtherClient Client
@inject NavigationManager UriHelper
@inject JsUtils JsUtils

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
            <MatHeadline4>@reportDisplayName</MatHeadline4>
            <div class="d-print-none pull-right d-print-none">
                @if (supportsEmail)
                {
                    <MatButton Icon="@MatIconNames.Email" Label="Email generator" OnClick="DownloadEmailGenerator" />
                }
                @if (supportsExcel)
                {
                    <MatButton Icon="@MatIconNames.Grid_on" Label="Export to Excel" OnClick="ExportToExcel" />
                }
                <MatButton Icon="@MatIconNames.Print" Label="Print" OnClick="Print" />
                <MatButton Icon="@MatIconNames.Fiber_new" Label="New report" OnClick="NewReport" />
                <MatButton Icon="@MatIconNames.Replay" Label="Back to list" OnClick="BackToList" />
            </div>
            @componentToRender
        </div>
    </div>
</div>

@code
{
    private string reportDisplayName = string.Empty;
    private bool supportsExcel = false;
    private bool supportsEmail = false;
    private RenderFragment componentToRender;
    private ReportViewModel report;

    [Parameter]
    public Guid? Id { get; set; }

    [Parameter]
    public string Type { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        // HACK: this is not going to fly
        if (string.Equals(Type, "PullRequestsReport", StringComparison.OrdinalIgnoreCase))
        {
            reportDisplayName = "Pull requests report";
            report = await Client.GetById<PullRequestReportViewModel>(Id.Value);
            supportsExcel = true;
            supportsEmail = false;
            componentToRender = b => RenderComponent<Ether.Components.Reports.PullRequestsReport>(b);
        }
        else if (string.Equals(Type, "AggregatedWorkitemsETAReport", StringComparison.OrdinalIgnoreCase))
        {
            reportDisplayName = "Aggregated workitems ETA report";
            report = await Client.GetById<AggregatedWorkitemsETAReportViewModel>(Id.Value);
            supportsExcel = false;
            supportsEmail = false;
            componentToRender = b => RenderComponent<Ether.Components.Reports.AggregatedWorkitemsETAReport>(b);
        }
        else if (string.Equals(Type, "WorkitemsReporter", StringComparison.OrdinalIgnoreCase))
        {
            reportDisplayName = "Workitems report";
            report = await Client.GetById<WorkItemsReportViewModel>(Id.Value);
            supportsExcel = true;
            supportsEmail = true;
            componentToRender = b => RenderComponent<Ether.Components.Reports.WorkitemsReport>(b);
        }
        else if (string.Equals(Type, "ReOpenedWorkitemsReporter", StringComparison.OrdinalIgnoreCase))
        {
            reportDisplayName = "Re-Opened work items report";
            report = await Client.GetById<ReOpenedWorkItemsReportViewModel>(Id.Value);
            supportsExcel = false;
            supportsEmail = false;
            componentToRender = b => RenderComponent<Ether.Components.Reports.ReopenedWorkitemsReport>(b);
        }
    }

    protected void RenderComponent<T>(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder)
        where T : IComponent
    {
        builder.OpenComponent<T>(1);
        builder.AddAttribute(2, "Id", Id.Value);
        builder.AddAttribute(3, "Report", report);
        builder.CloseComponent();
    }

    protected void BackToList()
    {
        UriHelper.NavigateTo("/reports");
    }

    protected void NewReport()
    {
        UriHelper.NavigateTo("/");
    }

    protected void Print()
    {
        JsUtils.Print();
    }

    protected async Task ExportToExcel()
    {
        var excelReport = await Client.GenerateExcel(report.Id);
        var base64EncodedReport = Convert.ToBase64String(excelReport);
        await JsUtils.SaveAsFile("report.xlsx", base64EncodedReport);
    }

    protected void DownloadEmailGenerator()
    {
        UriHelper.NavigateTo("/Ether.EmailGenerator.zip", forceLoad: true);
    }
}
